plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-allopen'
    id 'kotlin-parcelize'
    id 'com.gladed.androidgitversion' version '0.4.14'
}
android {
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.ik.mvvmtaskapp"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode 1//androidGitVersion.code()
        versionName androidGitVersion.name()

        testInstrumentationRunner "com.ik.mvvmtaskapp.hiltespresso.CustomTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/AL2.0'
            exclude 'META-INF/LGPL2.1'
            exclude 'win32-x86/attach_hotspot_windows.dll'
            exclude 'win32-x86-64/attach_hotspot_windows.dll'
            exclude 'META-INF/licenses/ASM'
            exclude("META-INF/*.kotlin_module")
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix = ".debug"
            debuggable true
            minifyEnabled false
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}


allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.ik.mvvmtaskapp.OpenClass'
}

dependencies {

    // Default dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.test:core:$testCoreVersion"

    // Fragment
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    // Lifecycle + ViewModel & LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"

    // DataStore
    implementation "androidx.datastore:datastore-preferences:$dataStoreVersion"

    // LottieAnimation
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Unit Test
    testImplementation "junit:junit:$junitVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"
    testImplementation "androidx.arch.core:core-testing:$archCoreTestingVersion"
    testImplementation "androidx.test:core-ktx:$testCoreVersion"

    // Instrumentation Test
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$archCoreTestingVersion"
    androidTestImplementation "androidx.test:core-ktx:$testCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$testExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "io.mockk:mockk-android:$mockkVersion"
    androidTestImplementation "androidx.fragment:fragment-testing:$fragmentTestingVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"

    //Test helpers
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.test:runner:$testInstrumentationRunnerVersion"
    androidTestUtil "androidx.test:orchestrator:$testOrchestratorVersion"
}

kapt {
    correctErrorTypes true
}

task printVersion {
    println androidGitVersion.code()
    println androidGitVersion.name()
}